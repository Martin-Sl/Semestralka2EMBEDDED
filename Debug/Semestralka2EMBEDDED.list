
Semestralka2EMBEDDED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cc0  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003eb8  08003eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed8  08003ed8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ee0  08003ee0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee4  08003ee4  00013ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000000c  08003ef4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003ef4  0002016c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad8f  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0f  00000000  00000000  0002adc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008b8  00000000  00000000  0002d448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bb3  00000000  00000000  0002dd00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25f  00000000  00000000  000548b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2702  00000000  00000000  0005fb12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152214  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000255c  00000000  00000000  00152268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003ea0 	.word	0x08003ea0

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003ea0 	.word	0x08003ea0

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fc4d 	bl	8000dd2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f86c 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f9a0 	bl	8000880 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000540:	f000 f950 	bl	80007e4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000544:	f000 f97e 	bl	8000844 <MX_DMA_Init>
  MX_ADC3_Init();
 8000548:	f000 f8fa 	bl	8000740 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, &potResult, 1);
 800054c:	2201      	movs	r2, #1
 800054e:	4928      	ldr	r1, [pc, #160]	; (80005f0 <main+0xc0>)
 8000550:	4828      	ldr	r0, [pc, #160]	; (80005f4 <main+0xc4>)
 8000552:	f000 fcdf 	bl	8000f14 <HAL_ADC_Start_DMA>
	while(HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK){

	}
	potResult = HAL_ADC_GetValue(&hadc3);
	*/
	potResult++;
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0xc0>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3301      	adds	r3, #1
 800055c:	4a24      	ldr	r2, [pc, #144]	; (80005f0 <main+0xc0>)
 800055e:	6013      	str	r3, [r2, #0]

	if(potResult>2000){
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <main+0xc0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000568:	d90b      	bls.n	8000582 <main+0x52>

		HAL_GPIO_WritePin(HSS_Pin_GPIO_Port, HSS_Pin_Pin, 1);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000570:	4821      	ldr	r0, [pc, #132]	; (80005f8 <main+0xc8>)
 8000572:	f001 feff 	bl	8002374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LSS_Pin_GPIO_Port, LSS_Pin_Pin, 1);
 8000576:	2201      	movs	r2, #1
 8000578:	2180      	movs	r1, #128	; 0x80
 800057a:	481f      	ldr	r0, [pc, #124]	; (80005f8 <main+0xc8>)
 800057c:	f001 fefa 	bl	8002374 <HAL_GPIO_WritePin>
 8000580:	e00a      	b.n	8000598 <main+0x68>
	}
	else{
		HAL_GPIO_WritePin(HSS_Pin_GPIO_Port, HSS_Pin_Pin, 0);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	481b      	ldr	r0, [pc, #108]	; (80005f8 <main+0xc8>)
 800058a:	f001 fef3 	bl	8002374 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LSS_Pin_GPIO_Port, LSS_Pin_Pin, 0);
 800058e:	2200      	movs	r2, #0
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	4819      	ldr	r0, [pc, #100]	; (80005f8 <main+0xc8>)
 8000594:	f001 feee 	bl	8002374 <HAL_GPIO_WritePin>

	}
	currentPinState = HAL_GPIO_ReadPin(RPM1_GPIO_Port, RPM1_Pin);
 8000598:	2104      	movs	r1, #4
 800059a:	4818      	ldr	r0, [pc, #96]	; (80005fc <main+0xcc>)
 800059c:	f001 fed2 	bl	8002344 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b16      	ldr	r3, [pc, #88]	; (8000600 <main+0xd0>)
 80005a6:	701a      	strb	r2, [r3, #0]
	if(currentPinState == 1 && lastPinState == 0){
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <main+0xd0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d116      	bne.n	80005de <main+0xae>
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <main+0xd4>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d112      	bne.n	80005de <main+0xae>
		// edge detected
		lastPinState = 1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	; (8000604 <main+0xd4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
		timeNow = HAL_GetTick();
 80005be:	f000 fc59 	bl	8000e74 <HAL_GetTick>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <main+0xd8>)
 80005c6:	6013      	str	r3, [r2, #0]
		timeDelta = timeNow - lastPulseTime;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <main+0xd8>)
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0xdc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <main+0xe0>)
 80005d4:	6013      	str	r3, [r2, #0]
		lastPulseTime = timeNow;
 80005d6:	4b0c      	ldr	r3, [pc, #48]	; (8000608 <main+0xd8>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a0c      	ldr	r2, [pc, #48]	; (800060c <main+0xdc>)
 80005dc:	6013      	str	r3, [r2, #0]

	}
	if(currentPinState == 0){
 80005de:	4b08      	ldr	r3, [pc, #32]	; (8000600 <main+0xd0>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d1b7      	bne.n	8000556 <main+0x26>
		lastPinState = 0;
 80005e6:	4b07      	ldr	r3, [pc, #28]	; (8000604 <main+0xd4>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	potResult++;
 80005ec:	e7b3      	b.n	8000556 <main+0x26>
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	20000120 	.word	0x20000120
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40020c00 	.word	0x40020c00
 8000600:	20000039 	.word	0x20000039
 8000604:	20000038 	.word	0x20000038
 8000608:	20000030 	.word	0x20000030
 800060c:	2000002c 	.word	0x2000002c
 8000610:	20000034 	.word	0x20000034

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b0b8      	sub	sp, #224	; 0xe0
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800061e:	2234      	movs	r2, #52	; 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fc34 	bl	8003e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2290      	movs	r2, #144	; 0x90
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fc25 	bl	8003e90 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000646:	f001 feaf 	bl	80023a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b3b      	ldr	r3, [pc, #236]	; (8000738 <SystemClock_Config+0x124>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	4a3a      	ldr	r2, [pc, #232]	; (8000738 <SystemClock_Config+0x124>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	6413      	str	r3, [r2, #64]	; 0x40
 8000656:	4b38      	ldr	r3, [pc, #224]	; (8000738 <SystemClock_Config+0x124>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000662:	4b36      	ldr	r3, [pc, #216]	; (800073c <SystemClock_Config+0x128>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800066a:	4a34      	ldr	r2, [pc, #208]	; (800073c <SystemClock_Config+0x128>)
 800066c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000670:	6013      	str	r3, [r2, #0]
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <SystemClock_Config+0x128>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067e:	2301      	movs	r3, #1
 8000680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000688:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000696:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069a:	2304      	movs	r3, #4
 800069c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006a0:	2360      	movs	r3, #96	; 0x60
 80006a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fed3 	bl	8002468 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80006c8:	f000 fa32 	bl	8000b30 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006cc:	f001 fe7c 	bl	80023c8 <HAL_PWREx_EnableOverDrive>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006d6:	f000 fa2b 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006da:	230f      	movs	r3, #15
 80006dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006fe:	2103      	movs	r1, #3
 8000700:	4618      	mov	r0, r3
 8000702:	f002 f95f 	bl	80029c4 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 800070c:	f000 fa10 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000714:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000716:	2300      	movs	r3, #0
 8000718:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071a:	f107 0308 	add.w	r3, r7, #8
 800071e:	4618      	mov	r0, r3
 8000720:	f002 fb52 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0x11a>
  {
    Error_Handler();
 800072a:	f000 fa01 	bl	8000b30 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	37e0      	adds	r7, #224	; 0xe0
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000754:	4a21      	ldr	r2, [pc, #132]	; (80007dc <MX_ADC3_Init+0x9c>)
 8000756:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000758:	4b1f      	ldr	r3, [pc, #124]	; (80007d8 <MX_ADC3_Init+0x98>)
 800075a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800075e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000760:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000766:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_ADC3_Init+0x98>)
 800076e:	2201      	movs	r2, #1
 8000770:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_ADC3_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000782:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_ADC3_Init+0xa0>)
 8000784:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_ADC3_Init+0x98>)
 800078e:	2201      	movs	r2, #1
 8000790:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_ADC3_Init+0x98>)
 8000794:	2201      	movs	r2, #1
 8000796:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_ADC3_Init+0x98>)
 800079c:	2201      	movs	r2, #1
 800079e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_ADC3_Init+0x98>)
 80007a2:	f000 fb73 	bl	8000e8c <HAL_ADC_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80007ac:	f000 f9c0 	bl	8000b30 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80007b0:	2309      	movs	r3, #9
 80007b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007b4:	2301      	movs	r3, #1
 80007b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007b8:	2307      	movs	r3, #7
 80007ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007bc:	463b      	mov	r3, r7
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_ADC3_Init+0x98>)
 80007c2:	f000 fcc3 	bl	800114c <HAL_ADC_ConfigChannel>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 f9b0 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000120 	.word	0x20000120
 80007dc:	40012200 	.word	0x40012200
 80007e0:	0f000001 	.word	0x0f000001

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART3_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART3_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000828:	f002 fef6 	bl	8003618 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f97d 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000003c 	.word	0x2000003c
 8000840:	40004800 	.word	0x40004800

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_DMA_Init+0x38>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a0b      	ldr	r2, [pc, #44]	; (800087c <MX_DMA_Init+0x38>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_DMA_Init+0x38>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2038      	movs	r0, #56	; 0x38
 8000868:	f001 f811 	bl	800188e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800086c:	2038      	movs	r0, #56	; 0x38
 800086e:	f001 f82a 	bl	80018c6 <HAL_NVIC_EnableIRQ>

}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40023800 	.word	0x40023800

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b08e      	sub	sp, #56	; 0x38
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	4b93      	ldr	r3, [pc, #588]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a92      	ldr	r2, [pc, #584]	; (8000ae4 <MX_GPIO_Init+0x264>)
 800089c:	f043 0304 	orr.w	r3, r3, #4
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b90      	ldr	r3, [pc, #576]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0304 	and.w	r3, r3, #4
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b8d      	ldr	r3, [pc, #564]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a8c      	ldr	r2, [pc, #560]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008b4:	f043 0320 	orr.w	r3, r3, #32
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b8a      	ldr	r3, [pc, #552]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0320 	and.w	r3, r3, #32
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b87      	ldr	r3, [pc, #540]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a86      	ldr	r2, [pc, #536]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b84      	ldr	r3, [pc, #528]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b81      	ldr	r3, [pc, #516]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a80      	ldr	r2, [pc, #512]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b7e      	ldr	r3, [pc, #504]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b7b      	ldr	r3, [pc, #492]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a7a      	ldr	r2, [pc, #488]	; (8000ae4 <MX_GPIO_Init+0x264>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b78      	ldr	r3, [pc, #480]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	613b      	str	r3, [r7, #16]
 800090c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b72      	ldr	r3, [pc, #456]	; (8000ae4 <MX_GPIO_Init+0x264>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a6e      	ldr	r2, [pc, #440]	; (8000ae4 <MX_GPIO_Init+0x264>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b69      	ldr	r3, [pc, #420]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a68      	ldr	r2, [pc, #416]	; (8000ae4 <MX_GPIO_Init+0x264>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b66      	ldr	r3, [pc, #408]	; (8000ae4 <MX_GPIO_Init+0x264>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	; 0x4081
 800095c:	4862      	ldr	r0, [pc, #392]	; (8000ae8 <MX_GPIO_Init+0x268>)
 800095e:	f001 fd09 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LSS_Pin_Pin|HSS_Pin_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8000968:	4860      	ldr	r0, [pc, #384]	; (8000aec <MX_GPIO_Init+0x26c>)
 800096a:	f001 fd03 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800096e:	2200      	movs	r2, #0
 8000970:	2140      	movs	r1, #64	; 0x40
 8000972:	485f      	ldr	r0, [pc, #380]	; (8000af0 <MX_GPIO_Init+0x270>)
 8000974:	f001 fcfe 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097e:	4b5d      	ldr	r3, [pc, #372]	; (8000af4 <MX_GPIO_Init+0x274>)
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098a:	4619      	mov	r1, r3
 800098c:	485a      	ldr	r0, [pc, #360]	; (8000af8 <MX_GPIO_Init+0x278>)
 800098e:	f001 fb2d 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000992:	2332      	movs	r3, #50	; 0x32
 8000994:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009aa:	4619      	mov	r1, r3
 80009ac:	4852      	ldr	r0, [pc, #328]	; (8000af8 <MX_GPIO_Init+0x278>)
 80009ae:	f001 fb1d 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b2:	2386      	movs	r3, #134	; 0x86
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b6:	2302      	movs	r3, #2
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009be:	2303      	movs	r3, #3
 80009c0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c2:	230b      	movs	r3, #11
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ca:	4619      	mov	r1, r3
 80009cc:	484b      	ldr	r0, [pc, #300]	; (8000afc <MX_GPIO_Init+0x27c>)
 80009ce:	f001 fb0d 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d2:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	483f      	ldr	r0, [pc, #252]	; (8000ae8 <MX_GPIO_Init+0x268>)
 80009ec:	f001 fafe 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : LSS_Pin_Pin HSS_Pin_Pin */
  GPIO_InitStruct.Pin = LSS_Pin_Pin|HSS_Pin_Pin;
 80009f0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4838      	ldr	r0, [pc, #224]	; (8000aec <MX_GPIO_Init+0x26c>)
 8000a0a:	f001 faef 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a14:	2302      	movs	r3, #2
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a20:	230b      	movs	r3, #11
 8000a22:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482f      	ldr	r0, [pc, #188]	; (8000ae8 <MX_GPIO_Init+0x268>)
 8000a2c:	f001 fade 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a30:	2340      	movs	r3, #64	; 0x40
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	482a      	ldr	r0, [pc, #168]	; (8000af0 <MX_GPIO_Init+0x270>)
 8000a48:	f001 fad0 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4824      	ldr	r0, [pc, #144]	; (8000af0 <MX_GPIO_Init+0x270>)
 8000a60:	f001 fac4 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a76:	230a      	movs	r3, #10
 8000a78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	481e      	ldr	r0, [pc, #120]	; (8000afc <MX_GPIO_Init+0x27c>)
 8000a82:	f001 fab3 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4818      	ldr	r0, [pc, #96]	; (8000afc <MX_GPIO_Init+0x27c>)
 8000a9c:	f001 faa6 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : RPM1_Pin */
  GPIO_InitStruct.Pin = RPM1_Pin;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RPM1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <MX_GPIO_Init+0x280>)
 8000ab4:	f001 fa9a 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_GPIO_Init+0x270>)
 8000ad6:	f001 fa89 	bl	8001fec <HAL_GPIO_Init>

}
 8000ada:	bf00      	nop
 8000adc:	3738      	adds	r7, #56	; 0x38
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40021800 	.word	0x40021800
 8000af4:	10110000 	.word	0x10110000
 8000af8:	40020800 	.word	0x40020800
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020c00 	.word	0x40020c00

08000b04 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
	potResult = HAL_ADC_GetValue(hadc);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 fafb 	bl	8001108 <HAL_ADC_GetValue>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_ADC_ConvCpltCallback+0x28>)
 8000b16:	6013      	str	r3, [r2, #0]
	potResult++;
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <HAL_ADC_ConvCpltCallback+0x28>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_ADC_ConvCpltCallback+0x28>)
 8000b20:	6013      	str	r3, [r2, #0]
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000028 	.word	0x20000028

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x44>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08a      	sub	sp, #40	; 0x28
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]
 8000b9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <HAL_ADC_MspInit+0xd4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d154      	bne.n	8000c50 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a2c      	ldr	r2, [pc, #176]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a26      	ldr	r2, [pc, #152]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bc4:	f043 0320 	orr.w	r3, r3, #32
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0320 	and.w	r3, r3, #32
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PF3     ------> ADC3_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	4619      	mov	r1, r3
 8000be8:	481d      	ldr	r0, [pc, #116]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000bea:	f001 f9ff 	bl	8001fec <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000bee:	4b1d      	ldr	r3, [pc, #116]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000bf0:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <HAL_ADC_MspInit+0xe4>)
 8000bf2:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000bf6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bfa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c02:	4b18      	ldr	r3, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000c08:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000c20:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000c34:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c36:	f000 fe61 	bl	80018fc <HAL_DMA_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000c40:	f7ff ff76 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c48:	639a      	str	r2, [r3, #56]	; 0x38
 8000c4a:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	; 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40012200 	.word	0x40012200
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40021400 	.word	0x40021400
 8000c64:	200000c0 	.word	0x200000c0
 8000c68:	40026410 	.word	0x40026410

08000c6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a17      	ldr	r2, [pc, #92]	; (8000ce8 <HAL_UART_MspInit+0x7c>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d128      	bne.n	8000ce0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a16      	ldr	r2, [pc, #88]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_UART_MspInit+0x80>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cbe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cd0:	2307      	movs	r3, #7
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4805      	ldr	r0, [pc, #20]	; (8000cf0 <HAL_UART_MspInit+0x84>)
 8000cdc:	f001 f986 	bl	8001fec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ce0:	bf00      	nop
 8000ce2:	3728      	adds	r7, #40	; 0x28
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40004800 	.word	0x40004800
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020c00 	.word	0x40020c00

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f884 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <DMA2_Stream0_IRQHandler+0x10>)
 8000d4e:	f000 fee3 	bl	8001b18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200000c0 	.word	0x200000c0

08000d5c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <SystemInit+0x20>)
 8000d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <SystemInit+0x20>)
 8000d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000db8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d84:	480d      	ldr	r0, [pc, #52]	; (8000dbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d86:	490e      	ldr	r1, [pc, #56]	; (8000dc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d8c:	e002      	b.n	8000d94 <LoopCopyDataInit>

08000d8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d92:	3304      	adds	r3, #4

08000d94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d98:	d3f9      	bcc.n	8000d8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d9c:	4c0b      	ldr	r4, [pc, #44]	; (8000dcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da0:	e001      	b.n	8000da6 <LoopFillZerobss>

08000da2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000da2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000da4:	3204      	adds	r2, #4

08000da6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000da6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000da8:	d3fb      	bcc.n	8000da2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000daa:	f7ff ffd7 	bl	8000d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f003 f84b 	bl	8003e48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000db2:	f7ff fbbd 	bl	8000530 <main>
  bx  lr    
 8000db6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000db8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc4:	08003ee8 	.word	0x08003ee8
  ldr r2, =_sbss
 8000dc8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dcc:	2000016c 	.word	0x2000016c

08000dd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd0:	e7fe      	b.n	8000dd0 <ADC_IRQHandler>

08000dd2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd6:	2003      	movs	r0, #3
 8000dd8:	f000 fd4e 	bl	8001878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ddc:	2000      	movs	r0, #0
 8000dde:	f000 f805 	bl	8000dec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000de2:	f7ff feab 	bl	8000b3c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 fd69 	bl	80018e2 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 fd31 	bl	800188e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000008 	.word	0x20000008
 8000e48:	20000004 	.word	0x20000004

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000168 	.word	0x20000168

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000168 	.word	0x20000168

08000e8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e031      	b.n	8000f06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff fe6a 	bl	8000b84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f003 0310 	and.w	r3, r3, #16
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d116      	bne.n	8000ef8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_ADC_Init+0x84>)
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	f043 0202 	orr.w	r2, r3, #2
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 fa80 	bl	80013e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f023 0303 	bic.w	r3, r3, #3
 8000eee:	f043 0201 	orr.w	r2, r3, #1
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ef6:	e001      	b.n	8000efc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	ffffeefd 	.word	0xffffeefd

08000f14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Start_DMA+0x1e>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e0d4      	b.n	80010dc <HAL_ADC_Start_DMA+0x1c8>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d018      	beq.n	8000f7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 0201 	orr.w	r2, r2, #1
 8000f56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f58:	4b62      	ldr	r3, [pc, #392]	; (80010e4 <HAL_ADC_Start_DMA+0x1d0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a62      	ldr	r2, [pc, #392]	; (80010e8 <HAL_ADC_Start_DMA+0x1d4>)
 8000f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f62:	0c9a      	lsrs	r2, r3, #18
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	f040 809c 	bne.w	80010c2 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f8e:	4b57      	ldr	r3, [pc, #348]	; (80010ec <HAL_ADC_Start_DMA+0x1d8>)
 8000f90:	4013      	ands	r3, r2
 8000f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d007      	beq.n	8000fb8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	f023 0206 	bic.w	r2, r3, #6
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fd2:	e002      	b.n	8000fda <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fe6:	4a42      	ldr	r2, [pc, #264]	; (80010f0 <HAL_ADC_Start_DMA+0x1dc>)
 8000fe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fee:	4a41      	ldr	r2, [pc, #260]	; (80010f4 <HAL_ADC_Start_DMA+0x1e0>)
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff6:	4a40      	ldr	r2, [pc, #256]	; (80010f8 <HAL_ADC_Start_DMA+0x1e4>)
 8000ff8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001002:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685a      	ldr	r2, [r3, #4]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001012:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689a      	ldr	r2, [r3, #8]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001022:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	334c      	adds	r3, #76	; 0x4c
 800102e:	4619      	mov	r1, r3
 8001030:	68ba      	ldr	r2, [r7, #8]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f000 fd10 	bl	8001a58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001038:	4b30      	ldr	r3, [pc, #192]	; (80010fc <HAL_ADC_Start_DMA+0x1e8>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 031f 	and.w	r3, r3, #31
 8001040:	2b00      	cmp	r3, #0
 8001042:	d10f      	bne.n	8001064 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d143      	bne.n	80010da <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	689a      	ldr	r2, [r3, #8]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	e03a      	b.n	80010da <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_ADC_Start_DMA+0x1ec>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10e      	bne.n	800108c <HAL_ADC_Start_DMA+0x178>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689a      	ldr	r2, [r3, #8]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800108a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800108c:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_ADC_Start_DMA+0x1e8>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0310 	and.w	r3, r3, #16
 8001094:	2b00      	cmp	r3, #0
 8001096:	d120      	bne.n	80010da <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <HAL_ADC_Start_DMA+0x1f0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d11b      	bne.n	80010da <HAL_ADC_Start_DMA+0x1c6>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d114      	bne.n	80010da <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689a      	ldr	r2, [r3, #8]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e00b      	b.n	80010da <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	fffff8fe 	.word	0xfffff8fe
 80010f0:	080015d5 	.word	0x080015d5
 80010f4:	0800168f 	.word	0x0800168f
 80010f8:	080016ab 	.word	0x080016ab
 80010fc:	40012300 	.word	0x40012300
 8001100:	40012000 	.word	0x40012000
 8001104:	40012200 	.word	0x40012200

08001108 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x1c>
 8001164:	2302      	movs	r3, #2
 8001166:	e12a      	b.n	80013be <HAL_ADC_ConfigChannel+0x272>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b09      	cmp	r3, #9
 8001176:	d93a      	bls.n	80011ee <HAL_ADC_ConfigChannel+0xa2>
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001180:	d035      	beq.n	80011ee <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68d9      	ldr	r1, [r3, #12]
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	b29b      	uxth	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	3b1e      	subs	r3, #30
 8001198:	2207      	movs	r2, #7
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	400a      	ands	r2, r1
 80011a6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a87      	ldr	r2, [pc, #540]	; (80013cc <HAL_ADC_ConfigChannel+0x280>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10a      	bne.n	80011c8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68d9      	ldr	r1, [r3, #12]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	061a      	lsls	r2, r3, #24
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011c6:	e035      	b.n	8001234 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68d9      	ldr	r1, [r3, #12]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	4603      	mov	r3, r0
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4403      	add	r3, r0
 80011e0:	3b1e      	subs	r3, #30
 80011e2:	409a      	lsls	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	430a      	orrs	r2, r1
 80011ea:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ec:	e022      	b.n	8001234 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6919      	ldr	r1, [r3, #16]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	461a      	mov	r2, r3
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	2207      	movs	r2, #7
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43da      	mvns	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	400a      	ands	r2, r1
 8001210:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6919      	ldr	r1, [r3, #16]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	4618      	mov	r0, r3
 8001224:	4603      	mov	r3, r0
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4403      	add	r3, r0
 800122a:	409a      	lsls	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b06      	cmp	r3, #6
 800123a:	d824      	bhi.n	8001286 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685a      	ldr	r2, [r3, #4]
 8001246:	4613      	mov	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	4413      	add	r3, r2
 800124c:	3b05      	subs	r3, #5
 800124e:	221f      	movs	r2, #31
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43da      	mvns	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	400a      	ands	r2, r1
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	4613      	mov	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	3b05      	subs	r3, #5
 8001278:	fa00 f203 	lsl.w	r2, r0, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	; 0x34
 8001284:	e04c      	b.n	8001320 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d824      	bhi.n	80012d8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685a      	ldr	r2, [r3, #4]
 8001298:	4613      	mov	r3, r2
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	3b23      	subs	r3, #35	; 0x23
 80012a0:	221f      	movs	r2, #31
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	4618      	mov	r0, r3
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	3b23      	subs	r3, #35	; 0x23
 80012ca:	fa00 f203 	lsl.w	r2, r0, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	430a      	orrs	r2, r1
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	e023      	b.n	8001320 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	3b41      	subs	r3, #65	; 0x41
 80012ea:	221f      	movs	r2, #31
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43da      	mvns	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	400a      	ands	r2, r1
 80012f8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685a      	ldr	r2, [r3, #4]
 800130c:	4613      	mov	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	4413      	add	r3, r2
 8001312:	3b41      	subs	r3, #65	; 0x41
 8001314:	fa00 f203 	lsl.w	r2, r0, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2a      	ldr	r2, [pc, #168]	; (80013d0 <HAL_ADC_ConfigChannel+0x284>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d10a      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x1f4>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001332:	d105      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001334:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4a26      	ldr	r2, [pc, #152]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 800133a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800133e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a22      	ldr	r2, [pc, #136]	; (80013d0 <HAL_ADC_ConfigChannel+0x284>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d109      	bne.n	800135e <HAL_ADC_ConfigChannel+0x212>
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d105      	bne.n	800135e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 8001358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800135c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_ADC_ConfigChannel+0x284>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d125      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x268>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <HAL_ADC_ConfigChannel+0x280>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d003      	beq.n	800137a <HAL_ADC_ConfigChannel+0x22e>
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b11      	cmp	r3, #17
 8001378:	d11c      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	4a15      	ldr	r2, [pc, #84]	; (80013d4 <HAL_ADC_ConfigChannel+0x288>)
 8001380:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001384:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a10      	ldr	r2, [pc, #64]	; (80013cc <HAL_ADC_ConfigChannel+0x280>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d111      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_ADC_ConfigChannel+0x28c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a11      	ldr	r2, [pc, #68]	; (80013dc <HAL_ADC_ConfigChannel+0x290>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	0c9a      	lsrs	r2, r3, #18
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80013a6:	e002      	b.n	80013ae <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d1f9      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	10000012 	.word	0x10000012
 80013d0:	40012000 	.word	0x40012000
 80013d4:	40012300 	.word	0x40012300
 80013d8:	20000000 	.word	0x20000000
 80013dc:	431bde83 	.word	0x431bde83

080013e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80013e8:	4b78      	ldr	r3, [pc, #480]	; (80015cc <ADC_Init+0x1ec>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a77      	ldr	r2, [pc, #476]	; (80015cc <ADC_Init+0x1ec>)
 80013ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80013f2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80013f4:	4b75      	ldr	r3, [pc, #468]	; (80015cc <ADC_Init+0x1ec>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4973      	ldr	r1, [pc, #460]	; (80015cc <ADC_Init+0x1ec>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6859      	ldr	r1, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	021a      	lsls	r2, r3, #8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685a      	ldr	r2, [r3, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6899      	ldr	r1, [r3, #8]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146e:	4a58      	ldr	r2, [pc, #352]	; (80015d0 <ADC_Init+0x1f0>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d022      	beq.n	80014ba <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6899      	ldr	r1, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6899      	ldr	r1, [r3, #8]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e00f      	b.n	80014da <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	689a      	ldr	r2, [r3, #8]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0202 	bic.w	r2, r2, #2
 80014e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6899      	ldr	r1, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	005a      	lsls	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01b      	beq.n	8001540 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001516:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6859      	ldr	r1, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001532:	3b01      	subs	r3, #1
 8001534:	035a      	lsls	r2, r3, #13
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e007      	b.n	8001550 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800154e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	3b01      	subs	r3, #1
 800156c:	051a      	lsls	r2, r3, #20
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6899      	ldr	r1, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001592:	025a      	lsls	r2, r3, #9
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	695b      	ldr	r3, [r3, #20]
 80015b6:	029a      	lsls	r2, r3, #10
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	609a      	str	r2, [r3, #8]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	0f000001 	.word	0x0f000001

080015d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d13c      	bne.n	8001668 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d12b      	bne.n	8001660 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800160c:	2b00      	cmp	r3, #0
 800160e:	d127      	bne.n	8001660 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001616:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161a:	2b00      	cmp	r3, #0
 800161c:	d006      	beq.n	800162c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001628:	2b00      	cmp	r3, #0
 800162a:	d119      	bne.n	8001660 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	685a      	ldr	r2, [r3, #4]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f022 0220 	bic.w	r2, r2, #32
 800163a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d105      	bne.n	8001660 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fa4f 	bl	8000b04 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001666:	e00e      	b.n	8001686 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f003 0310 	and.w	r3, r3, #16
 8001670:	2b00      	cmp	r3, #0
 8001672:	d003      	beq.n	800167c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fd5e 	bl	8001136 <HAL_ADC_ErrorCallback>
}
 800167a:	e004      	b.n	8001686 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
}
 8001686:	bf00      	nop
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800169c:	68f8      	ldr	r0, [r7, #12]
 800169e:	f7ff fd40 	bl	8001122 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2240      	movs	r2, #64	; 0x40
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	f043 0204 	orr.w	r2, r3, #4
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f7ff fd33 	bl	8001136 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	4313      	orrs	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <__NVIC_SetPriorityGrouping+0x40>)
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60d3      	str	r3, [r2, #12]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	05fa0000 	.word	0x05fa0000

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	; (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	; (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	; (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	; 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	; 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001844:	d301      	bcc.n	800184a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001846:	2301      	movs	r3, #1
 8001848:	e00f      	b.n	800186a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184a:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <SysTick_Config+0x40>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001852:	210f      	movs	r1, #15
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f7ff ff8e 	bl	8001778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <SysTick_Config+0x40>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001862:	4b04      	ldr	r3, [pc, #16]	; (8001874 <SysTick_Config+0x40>)
 8001864:	2207      	movs	r2, #7
 8001866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	e000e010 	.word	0xe000e010

08001878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff29 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b580      	push	{r7, lr}
 8001890:	b086      	sub	sp, #24
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	60b9      	str	r1, [r7, #8]
 8001898:	607a      	str	r2, [r7, #4]
 800189a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a0:	f7ff ff3e 	bl	8001720 <__NVIC_GetPriorityGrouping>
 80018a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	68b9      	ldr	r1, [r7, #8]
 80018aa:	6978      	ldr	r0, [r7, #20]
 80018ac:	f7ff ff8e 	bl	80017cc <NVIC_EncodePriority>
 80018b0:	4602      	mov	r2, r0
 80018b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b6:	4611      	mov	r1, r2
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff5d 	bl	8001778 <__NVIC_SetPriority>
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b082      	sub	sp, #8
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff ff31 	bl	800173c <__NVIC_EnableIRQ>
}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff ffa2 	bl	8001834 <SysTick_Config>
 80018f0:	4603      	mov	r3, r0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001908:	f7ff fab4 	bl	8000e74 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e099      	b.n	8001a4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0201 	bic.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001938:	e00f      	b.n	800195a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800193a:	f7ff fa9b 	bl	8000e74 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b05      	cmp	r3, #5
 8001946:	d908      	bls.n	800195a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2220      	movs	r2, #32
 800194c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2203      	movs	r2, #3
 8001952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e078      	b.n	8001a4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1e8      	bne.n	800193a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <HAL_DMA_Init+0x158>)
 8001974:	4013      	ands	r3, r2
 8001976:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001986:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001992:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d107      	bne.n	80019c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	4313      	orrs	r3, r2
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f023 0307 	bic.w	r3, r3, #7
 80019da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d117      	bne.n	8001a1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d00e      	beq.n	8001a1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 fa77 	bl	8001ef4 <DMA_CheckFifoParam>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d008      	beq.n	8001a1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2240      	movs	r2, #64	; 0x40
 8001a10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e016      	b.n	8001a4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 fa2e 	bl	8001e88 <DMA_CalcBaseAndBitshift>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a34:	223f      	movs	r2, #63	; 0x3f
 8001a36:	409a      	lsls	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	e010803f 	.word	0xe010803f

08001a58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Start_IT+0x26>
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	e048      	b.n	8001b10 <HAL_DMA_Start_IT+0xb8>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d137      	bne.n	8001b02 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2202      	movs	r2, #2
 8001a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f000 f9c0 	bl	8001e2c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab0:	223f      	movs	r2, #63	; 0x3f
 8001ab2:	409a      	lsls	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0216 	orr.w	r2, r2, #22
 8001ac6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ad6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d007      	beq.n	8001af0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0208 	orr.w	r2, r2, #8
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f042 0201 	orr.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	e005      	b.n	8001b0e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001b24:	4b92      	ldr	r3, [pc, #584]	; (8001d70 <HAL_DMA_IRQHandler+0x258>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a92      	ldr	r2, [pc, #584]	; (8001d74 <HAL_DMA_IRQHandler+0x25c>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b42:	2208      	movs	r2, #8
 8001b44:	409a      	lsls	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d01a      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0204 	bic.w	r2, r2, #4
 8001b6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2208      	movs	r2, #8
 8001b72:	409a      	lsls	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b88:	2201      	movs	r2, #1
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d012      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	f043 0202 	orr.w	r2, r3, #2
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbe:	2204      	movs	r2, #4
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00b      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	2204      	movs	r2, #4
 8001bde:	409a      	lsls	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be8:	f043 0204 	orr.w	r2, r3, #4
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d043      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0308 	and.w	r3, r3, #8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d03c      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	2210      	movs	r2, #16
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d018      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d108      	bne.n	8001c48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d024      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	4798      	blx	r3
 8001c46:	e01f      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	4798      	blx	r3
 8001c58:	e016      	b.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 0208 	bic.w	r2, r2, #8
 8001c76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 808e 	beq.w	8001db6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f000 8086 	beq.w	8001db6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cae:	2220      	movs	r2, #32
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b05      	cmp	r3, #5
 8001cc0:	d136      	bne.n	8001d30 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 0216 	bic.w	r2, r2, #22
 8001cd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_DMA_IRQHandler+0x1da>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d007      	beq.n	8001d02 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0208 	bic.w	r2, r2, #8
 8001d00:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d06:	223f      	movs	r2, #63	; 0x3f
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d07d      	beq.n	8001e22 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
        }
        return;
 8001d2e:	e078      	b.n	8001e22 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01c      	beq.n	8001d78 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d030      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	4798      	blx	r3
 8001d5c:	e02b      	b.n	8001db6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d027      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	4798      	blx	r3
 8001d6e:	e022      	b.n	8001db6 <HAL_DMA_IRQHandler+0x29e>
 8001d70:	20000000 	.word	0x20000000
 8001d74:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10f      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0210 	bic.w	r2, r2, #16
 8001d94:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2201      	movs	r2, #1
 8001da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d032      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2205      	movs	r2, #5
 8001dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	3301      	adds	r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d307      	bcc.n	8001dfe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f2      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x2ca>
 8001dfc:	e000      	b.n	8001e00 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dfe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4798      	blx	r3
 8001e20:	e000      	b.n	8001e24 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e22:	bf00      	nop
    }
  }
}
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop

08001e2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
 8001e38:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e48:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	2b40      	cmp	r3, #64	; 0x40
 8001e58:	d108      	bne.n	8001e6c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e6a:	e007      	b.n	8001e7c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	687a      	ldr	r2, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	3b10      	subs	r3, #16
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <DMA_CalcBaseAndBitshift+0x60>)
 8001e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ea2:	4a12      	ldr	r2, [pc, #72]	; (8001eec <DMA_CalcBaseAndBitshift+0x64>)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d908      	bls.n	8001ec8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	1d1a      	adds	r2, r3, #4
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	659a      	str	r2, [r3, #88]	; 0x58
 8001ec6:	e006      	b.n	8001ed6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <DMA_CalcBaseAndBitshift+0x68>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	aaaaaaab 	.word	0xaaaaaaab
 8001eec:	08003ed0 	.word	0x08003ed0
 8001ef0:	fffffc00 	.word	0xfffffc00

08001ef4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11f      	bne.n	8001f4e <DMA_CheckFifoParam+0x5a>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b03      	cmp	r3, #3
 8001f12:	d856      	bhi.n	8001fc2 <DMA_CheckFifoParam+0xce>
 8001f14:	a201      	add	r2, pc, #4	; (adr r2, 8001f1c <DMA_CheckFifoParam+0x28>)
 8001f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1a:	bf00      	nop
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f3f 	.word	0x08001f3f
 8001f24:	08001f2d 	.word	0x08001f2d
 8001f28:	08001fc3 	.word	0x08001fc3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d046      	beq.n	8001fc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f3c:	e043      	b.n	8001fc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f46:	d140      	bne.n	8001fca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f4c:	e03d      	b.n	8001fca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f56:	d121      	bne.n	8001f9c <DMA_CheckFifoParam+0xa8>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d837      	bhi.n	8001fce <DMA_CheckFifoParam+0xda>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <DMA_CheckFifoParam+0x70>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001f75 	.word	0x08001f75
 8001f68:	08001f7b 	.word	0x08001f7b
 8001f6c:	08001f75 	.word	0x08001f75
 8001f70:	08001f8d 	.word	0x08001f8d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	73fb      	strb	r3, [r7, #15]
      break;
 8001f78:	e030      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d025      	beq.n	8001fd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f8a:	e022      	b.n	8001fd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f94:	d11f      	bne.n	8001fd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f9a:	e01c      	b.n	8001fd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d903      	bls.n	8001faa <DMA_CheckFifoParam+0xb6>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d003      	beq.n	8001fb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa8:	e018      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
      break;
 8001fae:	e015      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00e      	beq.n	8001fda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc0:	e00b      	b.n	8001fda <DMA_CheckFifoParam+0xe6>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e00a      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e008      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e006      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e004      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
    }
  } 
  
  return status; 
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e175      	b.n	80022f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	429a      	cmp	r2, r3
 8002026:	f040 8164 	bne.w	80022f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d00b      	beq.n	800204a <HAL_GPIO_Init+0x5e>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203e:	2b11      	cmp	r3, #17
 8002040:	d003      	beq.n	800204a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b12      	cmp	r3, #18
 8002048:	d130      	bne.n	80020ac <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	2203      	movs	r2, #3
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68da      	ldr	r2, [r3, #12]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4313      	orrs	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002080:	2201      	movs	r2, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	f003 0201 	and.w	r2, r3, #1
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x100>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	d123      	bne.n	8002134 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	220f      	movs	r2, #15
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	691a      	ldr	r2, [r3, #16]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	08da      	lsrs	r2, r3, #3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3208      	adds	r2, #8
 800212e:	69b9      	ldr	r1, [r7, #24]
 8002130:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	2203      	movs	r2, #3
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80be 	beq.w	80022f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002176:	4b66      	ldr	r3, [pc, #408]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a65      	ldr	r2, [pc, #404]	; (8002310 <HAL_GPIO_Init+0x324>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b63      	ldr	r3, [pc, #396]	; (8002310 <HAL_GPIO_Init+0x324>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800218e:	4a61      	ldr	r2, [pc, #388]	; (8002314 <HAL_GPIO_Init+0x328>)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	089b      	lsrs	r3, r3, #2
 8002194:	3302      	adds	r3, #2
 8002196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	220f      	movs	r2, #15
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a58      	ldr	r2, [pc, #352]	; (8002318 <HAL_GPIO_Init+0x32c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d037      	beq.n	800222a <HAL_GPIO_Init+0x23e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a57      	ldr	r2, [pc, #348]	; (800231c <HAL_GPIO_Init+0x330>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d031      	beq.n	8002226 <HAL_GPIO_Init+0x23a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_GPIO_Init+0x334>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02b      	beq.n	8002222 <HAL_GPIO_Init+0x236>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a55      	ldr	r2, [pc, #340]	; (8002324 <HAL_GPIO_Init+0x338>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d025      	beq.n	800221e <HAL_GPIO_Init+0x232>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a54      	ldr	r2, [pc, #336]	; (8002328 <HAL_GPIO_Init+0x33c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d01f      	beq.n	800221a <HAL_GPIO_Init+0x22e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a53      	ldr	r2, [pc, #332]	; (800232c <HAL_GPIO_Init+0x340>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d019      	beq.n	8002216 <HAL_GPIO_Init+0x22a>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a52      	ldr	r2, [pc, #328]	; (8002330 <HAL_GPIO_Init+0x344>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d013      	beq.n	8002212 <HAL_GPIO_Init+0x226>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_GPIO_Init+0x348>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d00d      	beq.n	800220e <HAL_GPIO_Init+0x222>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_GPIO_Init+0x34c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x21e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4f      	ldr	r2, [pc, #316]	; (800233c <HAL_GPIO_Init+0x350>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d101      	bne.n	8002206 <HAL_GPIO_Init+0x21a>
 8002202:	2309      	movs	r3, #9
 8002204:	e012      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002206:	230a      	movs	r3, #10
 8002208:	e010      	b.n	800222c <HAL_GPIO_Init+0x240>
 800220a:	2308      	movs	r3, #8
 800220c:	e00e      	b.n	800222c <HAL_GPIO_Init+0x240>
 800220e:	2307      	movs	r3, #7
 8002210:	e00c      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002212:	2306      	movs	r3, #6
 8002214:	e00a      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002216:	2305      	movs	r3, #5
 8002218:	e008      	b.n	800222c <HAL_GPIO_Init+0x240>
 800221a:	2304      	movs	r3, #4
 800221c:	e006      	b.n	800222c <HAL_GPIO_Init+0x240>
 800221e:	2303      	movs	r3, #3
 8002220:	e004      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002222:	2302      	movs	r3, #2
 8002224:	e002      	b.n	800222c <HAL_GPIO_Init+0x240>
 8002226:	2301      	movs	r3, #1
 8002228:	e000      	b.n	800222c <HAL_GPIO_Init+0x240>
 800222a:	2300      	movs	r3, #0
 800222c:	69fa      	ldr	r2, [r7, #28]
 800222e:	f002 0203 	and.w	r2, r2, #3
 8002232:	0092      	lsls	r2, r2, #2
 8002234:	4093      	lsls	r3, r2
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800223c:	4935      	ldr	r1, [pc, #212]	; (8002314 <HAL_GPIO_Init+0x328>)
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	3302      	adds	r3, #2
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <HAL_GPIO_Init+0x354>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	43db      	mvns	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4013      	ands	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226e:	4a34      	ldr	r2, [pc, #208]	; (8002340 <HAL_GPIO_Init+0x354>)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002274:	4b32      	ldr	r3, [pc, #200]	; (8002340 <HAL_GPIO_Init+0x354>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002298:	4a29      	ldr	r2, [pc, #164]	; (8002340 <HAL_GPIO_Init+0x354>)
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229e:	4b28      	ldr	r3, [pc, #160]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	4013      	ands	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	43db      	mvns	r3, r3
 80022d2:	69ba      	ldr	r2, [r7, #24]
 80022d4:	4013      	ands	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ec:	4a14      	ldr	r2, [pc, #80]	; (8002340 <HAL_GPIO_Init+0x354>)
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	3301      	adds	r3, #1
 80022f6:	61fb      	str	r3, [r7, #28]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	2b0f      	cmp	r3, #15
 80022fc:	f67f ae86 	bls.w	800200c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002300:	bf00      	nop
 8002302:	bf00      	nop
 8002304:	3724      	adds	r7, #36	; 0x24
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	40013800 	.word	0x40013800
 8002318:	40020000 	.word	0x40020000
 800231c:	40020400 	.word	0x40020400
 8002320:	40020800 	.word	0x40020800
 8002324:	40020c00 	.word	0x40020c00
 8002328:	40021000 	.word	0x40021000
 800232c:	40021400 	.word	0x40021400
 8002330:	40021800 	.word	0x40021800
 8002334:	40021c00 	.word	0x40021c00
 8002338:	40022000 	.word	0x40022000
 800233c:	40022400 	.word	0x40022400
 8002340:	40013c00 	.word	0x40013c00

08002344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	460b      	mov	r3, r1
 800234e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	4013      	ands	r3, r2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80023b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b6:	6013      	str	r3, [r2, #0]
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	40007000 	.word	0x40007000

080023c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b23      	ldr	r3, [pc, #140]	; (8002460 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b20      	ldr	r3, [pc, #128]	; (8002460 <HAL_PWREx_EnableOverDrive+0x98>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023f6:	f7fe fd3d 	bl	8000e74 <HAL_GetTick>
 80023fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023fc:	e009      	b.n	8002412 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023fe:	f7fe fd39 	bl	8000e74 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800240c:	d901      	bls.n	8002412 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e022      	b.n	8002458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241e:	d1ee      	bne.n	80023fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800242a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800242c:	f7fe fd22 	bl	8000e74 <HAL_GetTick>
 8002430:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002432:	e009      	b.n	8002448 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002434:	f7fe fd1e 	bl	8000e74 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002442:	d901      	bls.n	8002448 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e007      	b.n	8002458 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <HAL_PWREx_EnableOverDrive+0x9c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002450:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002454:	d1ee      	bne.n	8002434 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	40007000 	.word	0x40007000

08002468 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e29b      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 8087 	beq.w	800259a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800248c:	4b96      	ldr	r3, [pc, #600]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b04      	cmp	r3, #4
 8002496:	d00c      	beq.n	80024b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002498:	4b93      	ldr	r3, [pc, #588]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d112      	bne.n	80024ca <HAL_RCC_OscConfig+0x62>
 80024a4:	4b90      	ldr	r3, [pc, #576]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b0:	d10b      	bne.n	80024ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b2:	4b8d      	ldr	r3, [pc, #564]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d06c      	beq.n	8002598 <HAL_RCC_OscConfig+0x130>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d168      	bne.n	8002598 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e275      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d2:	d106      	bne.n	80024e2 <HAL_RCC_OscConfig+0x7a>
 80024d4:	4b84      	ldr	r3, [pc, #528]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a83      	ldr	r2, [pc, #524]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	e02e      	b.n	8002540 <HAL_RCC_OscConfig+0xd8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10c      	bne.n	8002504 <HAL_RCC_OscConfig+0x9c>
 80024ea:	4b7f      	ldr	r3, [pc, #508]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	4b7c      	ldr	r3, [pc, #496]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a7b      	ldr	r2, [pc, #492]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80024fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002500:	6013      	str	r3, [r2, #0]
 8002502:	e01d      	b.n	8002540 <HAL_RCC_OscConfig+0xd8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0xc0>
 800250e:	4b76      	ldr	r3, [pc, #472]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a75      	ldr	r2, [pc, #468]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b73      	ldr	r3, [pc, #460]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a72      	ldr	r2, [pc, #456]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e00b      	b.n	8002540 <HAL_RCC_OscConfig+0xd8>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6e      	ldr	r2, [pc, #440]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800252e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	4b6c      	ldr	r3, [pc, #432]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a6b      	ldr	r2, [pc, #428]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800253a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800253e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fc94 	bl	8000e74 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fc90 	bl	8000e74 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e229      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002562:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e014      	b.n	800259a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002570:	f7fe fc80 	bl	8000e74 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002578:	f7fe fc7c 	bl	8000e74 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b64      	cmp	r3, #100	; 0x64
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e215      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258a:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x110>
 8002596:	e000      	b.n	800259a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d069      	beq.n	800267a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025a6:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b2:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f003 030c 	and.w	r3, r3, #12
 80025ba:	2b08      	cmp	r3, #8
 80025bc:	d11c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x190>
 80025be:	4b4a      	ldr	r3, [pc, #296]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d116      	bne.n	80025f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	4b47      	ldr	r3, [pc, #284]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17a>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e1e9      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e2:	4b41      	ldr	r3, [pc, #260]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	493d      	ldr	r1, [pc, #244]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f6:	e040      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a38      	ldr	r2, [pc, #224]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fc32 	bl	8000e74 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7fe fc2e 	bl	8000e74 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1c7      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002626:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0302 	and.w	r3, r3, #2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4929      	ldr	r1, [pc, #164]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
 8002646:	e018      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 800264e:	f023 0301 	bic.w	r3, r3, #1
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fc0e 	bl	8000e74 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fc0a 	bl	8000e74 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e1a3      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266e:	4b1e      	ldr	r3, [pc, #120]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d038      	beq.n	80026f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d019      	beq.n	80026c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269a:	f7fe fbeb 	bl	8000e74 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026a2:	f7fe fbe7 	bl	8000e74 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e180      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b4:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d0f0      	beq.n	80026a2 <HAL_RCC_OscConfig+0x23a>
 80026c0:	e01a      	b.n	80026f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80026c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <HAL_RCC_OscConfig+0x280>)
 80026c8:	f023 0301 	bic.w	r3, r3, #1
 80026cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ce:	f7fe fbd1 	bl	8000e74 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e00a      	b.n	80026ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d6:	f7fe fbcd 	bl	8000e74 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d903      	bls.n	80026ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e166      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
 80026e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b92      	ldr	r3, [pc, #584]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ee      	bne.n	80026d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 80a4 	beq.w	800284e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b8c      	ldr	r3, [pc, #560]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10d      	bne.n	800272e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	4b89      	ldr	r3, [pc, #548]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	4a88      	ldr	r2, [pc, #544]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	; 0x40
 800271e:	4b86      	ldr	r3, [pc, #536]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800272e:	4b83      	ldr	r3, [pc, #524]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800273a:	4b80      	ldr	r3, [pc, #512]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a7f      	ldr	r2, [pc, #508]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe fb95 	bl	8000e74 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fb91 	bl	8000e74 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e12a      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002760:	4b76      	ldr	r3, [pc, #472]	; (800293c <HAL_RCC_OscConfig+0x4d4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x31a>
 8002774:	4b70      	ldr	r3, [pc, #448]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a6f      	ldr	r2, [pc, #444]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
 8002780:	e02d      	b.n	80027de <HAL_RCC_OscConfig+0x376>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x33c>
 800278a:	4b6b      	ldr	r3, [pc, #428]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a6a      	ldr	r2, [pc, #424]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002790:	f023 0301 	bic.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	4b68      	ldr	r3, [pc, #416]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	4a67      	ldr	r2, [pc, #412]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800279c:	f023 0304 	bic.w	r3, r3, #4
 80027a0:	6713      	str	r3, [r2, #112]	; 0x70
 80027a2:	e01c      	b.n	80027de <HAL_RCC_OscConfig+0x376>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCC_OscConfig+0x35e>
 80027ac:	4b62      	ldr	r3, [pc, #392]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a61      	ldr	r2, [pc, #388]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027b2:	f043 0304 	orr.w	r3, r3, #4
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	4a5e      	ldr	r2, [pc, #376]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	; 0x70
 80027c4:	e00b      	b.n	80027de <HAL_RCC_OscConfig+0x376>
 80027c6:	4b5c      	ldr	r3, [pc, #368]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a5b      	ldr	r2, [pc, #364]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d6:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	f023 0304 	bic.w	r3, r3, #4
 80027dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d015      	beq.n	8002812 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e6:	f7fe fb45 	bl	8000e74 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e00a      	b.n	8002804 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f7fe fb41 	bl	8000e74 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e0d8      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	4b4c      	ldr	r3, [pc, #304]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ee      	beq.n	80027ee <HAL_RCC_OscConfig+0x386>
 8002810:	e014      	b.n	800283c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fb2f 	bl	8000e74 <HAL_GetTick>
 8002816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002818:	e00a      	b.n	8002830 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800281a:	f7fe fb2b 	bl	8000e74 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	f241 3288 	movw	r2, #5000	; 0x1388
 8002828:	4293      	cmp	r3, r2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0c2      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1ee      	bne.n	800281a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d105      	bne.n	800284e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002842:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a3c      	ldr	r2, [pc, #240]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	f000 80ae 	beq.w	80029b4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002858:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d06d      	beq.n	8002940 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d14b      	bne.n	8002904 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a31      	ldr	r2, [pc, #196]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002872:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fafc 	bl	8000e74 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe faf8 	bl	8000e74 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e091      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b29      	ldr	r3, [pc, #164]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69da      	ldr	r2, [r3, #28]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	019b      	lsls	r3, r3, #6
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	3b01      	subs	r3, #1
 80028b8:	041b      	lsls	r3, r3, #16
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	061b      	lsls	r3, r3, #24
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	071b      	lsls	r3, r3, #28
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a18      	ldr	r2, [pc, #96]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80028d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe faca 	bl	8000e74 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe fac6 	bl	8000e74 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e05f      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b10      	ldr	r3, [pc, #64]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x47c>
 8002902:	e057      	b.n	80029b4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0b      	ldr	r2, [pc, #44]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fab0 	bl	8000e74 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe faac 	bl	8000e74 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e045      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b03      	ldr	r3, [pc, #12]	; (8002938 <HAL_RCC_OscConfig+0x4d0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x4b0>
 8002936:	e03d      	b.n	80029b4 <HAL_RCC_OscConfig+0x54c>
 8002938:	40023800 	.word	0x40023800
 800293c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002940:	4b1f      	ldr	r3, [pc, #124]	; (80029c0 <HAL_RCC_OscConfig+0x558>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d030      	beq.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002958:	429a      	cmp	r2, r3
 800295a:	d129      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	429a      	cmp	r2, r3
 8002968:	d122      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002970:	4013      	ands	r3, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002976:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	4293      	cmp	r3, r2
 800297a:	d119      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	085b      	lsrs	r3, r3, #1
 8002988:	3b01      	subs	r3, #1
 800298a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800298c:	429a      	cmp	r2, r3
 800298e:	d10f      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d107      	bne.n	80029b0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0d0      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b6a      	ldr	r3, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d910      	bls.n	8002a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b67      	ldr	r3, [pc, #412]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4965      	ldr	r1, [pc, #404]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b63      	ldr	r3, [pc, #396]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e0b8      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d020      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a24:	4b59      	ldr	r3, [pc, #356]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a3c:	4b53      	ldr	r3, [pc, #332]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	4a52      	ldr	r2, [pc, #328]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b50      	ldr	r3, [pc, #320]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	494d      	ldr	r1, [pc, #308]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d040      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d107      	bne.n	8002a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	4b47      	ldr	r3, [pc, #284]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d115      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e07f      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a86:	4b41      	ldr	r3, [pc, #260]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e073      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e06b      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa6:	4b39      	ldr	r3, [pc, #228]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f023 0203 	bic.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4936      	ldr	r1, [pc, #216]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab8:	f7fe f9dc 	bl	8000e74 <HAL_GetTick>
 8002abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002abe:	e00a      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac0:	f7fe f9d8 	bl	8000e74 <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e053      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	4b2d      	ldr	r3, [pc, #180]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 020c 	and.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d1eb      	bne.n	8002ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b27      	ldr	r3, [pc, #156]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d210      	bcs.n	8002b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	4922      	ldr	r1, [pc, #136]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b20      	ldr	r3, [pc, #128]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e032      	b.n	8002b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d008      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	4916      	ldr	r1, [pc, #88]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b42:	4b12      	ldr	r3, [pc, #72]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	490e      	ldr	r1, [pc, #56]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b56:	f000 f821 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	490a      	ldr	r1, [pc, #40]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b68:	5ccb      	ldrb	r3, [r1, r3]
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1d4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f938 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	08003eb8 	.word	0x08003eb8
 8002b94:	20000000 	.word	0x20000000
 8002b98:	20000004 	.word	0x20000004

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	607b      	str	r3, [r7, #4]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	2300      	movs	r3, #0
 8002bae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb4:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	f003 030c 	and.w	r3, r3, #12
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	d00d      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x40>
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	f200 80bd 	bhi.w	8002d40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d003      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bce:	e0b7      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bd0:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bd2:	60bb      	str	r3, [r7, #8]
      break;
 8002bd4:	e0b7      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd6:	4b61      	ldr	r3, [pc, #388]	; (8002d5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bd8:	60bb      	str	r3, [r7, #8]
      break;
 8002bda:	e0b4      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bdc:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002be4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002be6:	4b5b      	ldr	r3, [pc, #364]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04d      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b58      	ldr	r3, [pc, #352]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	ea02 0800 	and.w	r8, r2, r0
 8002c0a:	ea03 0901 	and.w	r9, r3, r1
 8002c0e:	4640      	mov	r0, r8
 8002c10:	4649      	mov	r1, r9
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	014b      	lsls	r3, r1, #5
 8002c1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c20:	0142      	lsls	r2, r0, #5
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	ebb0 0008 	subs.w	r0, r0, r8
 8002c2a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	f04f 0300 	mov.w	r3, #0
 8002c36:	018b      	lsls	r3, r1, #6
 8002c38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c3c:	0182      	lsls	r2, r0, #6
 8002c3e:	1a12      	subs	r2, r2, r0
 8002c40:	eb63 0301 	sbc.w	r3, r3, r1
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	00d9      	lsls	r1, r3, #3
 8002c4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c52:	00d0      	lsls	r0, r2, #3
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	eb12 0208 	adds.w	r2, r2, r8
 8002c5c:	eb43 0309 	adc.w	r3, r3, r9
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0259      	lsls	r1, r3, #9
 8002c6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c6e:	0250      	lsls	r0, r2, #9
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f7fd fada 	bl	8000238 <__aeabi_uldivmod>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4613      	mov	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e04a      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	461a      	mov	r2, r3
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c9e:	f04f 0100 	mov.w	r1, #0
 8002ca2:	ea02 0400 	and.w	r4, r2, r0
 8002ca6:	ea03 0501 	and.w	r5, r3, r1
 8002caa:	4620      	mov	r0, r4
 8002cac:	4629      	mov	r1, r5
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	014b      	lsls	r3, r1, #5
 8002cb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cbc:	0142      	lsls	r2, r0, #5
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	1b00      	subs	r0, r0, r4
 8002cc4:	eb61 0105 	sbc.w	r1, r1, r5
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	018b      	lsls	r3, r1, #6
 8002cd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cd6:	0182      	lsls	r2, r0, #6
 8002cd8:	1a12      	subs	r2, r2, r0
 8002cda:	eb63 0301 	sbc.w	r3, r3, r1
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	00d9      	lsls	r1, r3, #3
 8002ce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cec:	00d0      	lsls	r0, r2, #3
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	1912      	adds	r2, r2, r4
 8002cf4:	eb45 0303 	adc.w	r3, r5, r3
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0299      	lsls	r1, r3, #10
 8002d02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d06:	0290      	lsls	r0, r2, #10
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4610      	mov	r0, r2
 8002d0e:	4619      	mov	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	f7fd fa8e 	bl	8000238 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	0c1b      	lsrs	r3, r3, #16
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d3c:	60bb      	str	r3, [r7, #8]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d42:	60bb      	str	r3, [r7, #8]
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	68bb      	ldr	r3, [r7, #8]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d52:	bf00      	nop
 8002d54:	40023800 	.word	0x40023800
 8002d58:	00f42400 	.word	0x00f42400
 8002d5c:	007a1200 	.word	0x007a1200

08002d60 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20000000 	.word	0x20000000

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d7c:	f7ff fff0 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002d80:	4602      	mov	r2, r0
 8002d82:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	0a9b      	lsrs	r3, r3, #10
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	4903      	ldr	r1, [pc, #12]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d8e:	5ccb      	ldrb	r3, [r1, r3]
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	08003ec8 	.word	0x08003ec8

08002da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002da4:	f7ff ffdc 	bl	8002d60 <HAL_RCC_GetHCLKFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0b5b      	lsrs	r3, r3, #13
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4903      	ldr	r1, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08003ec8 	.word	0x08003ec8

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d012      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002df0:	4b69      	ldr	r3, [pc, #420]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a68      	ldr	r2, [pc, #416]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002df6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dfa:	6093      	str	r3, [r2, #8]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	4964      	ldr	r1, [pc, #400]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e12:	2301      	movs	r3, #1
 8002e14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d017      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e22:	4b5d      	ldr	r3, [pc, #372]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e30:	4959      	ldr	r1, [pc, #356]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e40:	d101      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d017      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	494a      	ldr	r1, [pc, #296]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0320 	and.w	r3, r3, #32
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 808b 	beq.w	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002eac:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	4a39      	ldr	r2, [pc, #228]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb8:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a34      	ldr	r2, [pc, #208]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ece:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ed0:	f7fd ffd0 	bl	8000e74 <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed8:	f7fd ffcc 	bl	8000e74 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e38f      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eea:	4b2c      	ldr	r3, [pc, #176]	; (8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ef6:	4b28      	ldr	r3, [pc, #160]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002efe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d035      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d02e      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f3c:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d114      	bne.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fd ff94 	bl	8000e74 <HAL_GetTick>
 8002f4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f4e:	e00a      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f50:	f7fd ff90 	bl	8000e74 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e351      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0ee      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f7e:	d111      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f80:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f8c:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f8e:	400b      	ands	r3, r1
 8002f90:	4901      	ldr	r1, [pc, #4]	; (8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	0ffffcff 	.word	0x0ffffcff
 8002fa4:	4bb3      	ldr	r3, [pc, #716]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4ab2      	ldr	r2, [pc, #712]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002faa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fae:	6093      	str	r3, [r2, #8]
 8002fb0:	4bb0      	ldr	r3, [pc, #704]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fbc:	49ad      	ldr	r1, [pc, #692]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0310 	and.w	r3, r3, #16
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fce:	4ba9      	ldr	r3, [pc, #676]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd4:	4aa7      	ldr	r2, [pc, #668]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fda:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fde:	4ba5      	ldr	r3, [pc, #660]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fe0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	49a2      	ldr	r1, [pc, #648]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ffc:	4b9d      	ldr	r3, [pc, #628]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003002:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300a:	499a      	ldr	r1, [pc, #616]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800301e:	4b95      	ldr	r3, [pc, #596]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003024:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800302c:	4991      	ldr	r1, [pc, #580]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00a      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003040:	4b8c      	ldr	r3, [pc, #560]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003046:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800304e:	4989      	ldr	r1, [pc, #548]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003062:	4b84      	ldr	r3, [pc, #528]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003068:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4980      	ldr	r1, [pc, #512]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003084:	4b7b      	ldr	r3, [pc, #492]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308a:	f023 0203 	bic.w	r2, r3, #3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003092:	4978      	ldr	r1, [pc, #480]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030a6:	4b73      	ldr	r3, [pc, #460]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ac:	f023 020c 	bic.w	r2, r3, #12
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	496f      	ldr	r1, [pc, #444]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030c8:	4b6a      	ldr	r3, [pc, #424]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	4967      	ldr	r1, [pc, #412]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ea:	4b62      	ldr	r3, [pc, #392]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f8:	495e      	ldr	r1, [pc, #376]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800310c:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800310e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800311a:	4956      	ldr	r1, [pc, #344]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003134:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313c:	494d      	ldr	r1, [pc, #308]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003150:	4b48      	ldr	r3, [pc, #288]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315e:	4945      	ldr	r1, [pc, #276]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003172:	4b40      	ldr	r3, [pc, #256]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	493c      	ldr	r1, [pc, #240]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a2:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d011      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031b6:	4b2f      	ldr	r3, [pc, #188]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c4:	492b      	ldr	r1, [pc, #172]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031d4:	d101      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031d6:	2301      	movs	r3, #1
 80031d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031e6:	2301      	movs	r3, #1
 80031e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031f6:	4b1f      	ldr	r3, [pc, #124]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003204:	491b      	ldr	r1, [pc, #108]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003218:	4b16      	ldr	r3, [pc, #88]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003228:	4912      	ldr	r1, [pc, #72]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800323c:	4b0d      	ldr	r3, [pc, #52]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324c:	4909      	ldr	r1, [pc, #36]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003260:	4b04      	ldr	r3, [pc, #16]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003266:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003270:	e002      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	4986      	ldr	r1, [pc, #536]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800327a:	4313      	orrs	r3, r2
 800327c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800328c:	4b81      	ldr	r3, [pc, #516]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800328e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329c:	497d      	ldr	r1, [pc, #500]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d006      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 80d6 	beq.w	8003464 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032b8:	4b76      	ldr	r3, [pc, #472]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a75      	ldr	r2, [pc, #468]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c4:	f7fd fdd6 	bl	8000e74 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032cc:	f7fd fdd2 	bl	8000e74 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b64      	cmp	r3, #100	; 0x64
 80032d8:	d901      	bls.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e195      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032de:	4b6d      	ldr	r3, [pc, #436]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d021      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d11d      	bne.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032fe:	4b65      	ldr	r3, [pc, #404]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003304:	0c1b      	lsrs	r3, r3, #16
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800330c:	4b61      	ldr	r3, [pc, #388]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800330e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003312:	0e1b      	lsrs	r3, r3, #24
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	019a      	lsls	r2, r3, #6
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	041b      	lsls	r3, r3, #16
 8003324:	431a      	orrs	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	431a      	orrs	r2, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	071b      	lsls	r3, r3, #28
 8003332:	4958      	ldr	r1, [pc, #352]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003334:	4313      	orrs	r3, r2
 8003336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003358:	2b00      	cmp	r3, #0
 800335a:	d02e      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003364:	d129      	bne.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003366:	4b4b      	ldr	r3, [pc, #300]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336c:	0c1b      	lsrs	r3, r3, #16
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003374:	4b47      	ldr	r3, [pc, #284]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337a:	0f1b      	lsrs	r3, r3, #28
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	493e      	ldr	r1, [pc, #248]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033a2:	4b3c      	ldr	r3, [pc, #240]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033a8:	f023 021f 	bic.w	r2, r3, #31
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b0:	3b01      	subs	r3, #1
 80033b2:	4938      	ldr	r1, [pc, #224]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d01d      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033c6:	4b33      	ldr	r3, [pc, #204]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033cc:	0e1b      	lsrs	r3, r3, #24
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033d4:	4b2f      	ldr	r3, [pc, #188]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033da:	0f1b      	lsrs	r3, r3, #28
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	019a      	lsls	r2, r3, #6
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	041b      	lsls	r3, r3, #16
 80033ee:	431a      	orrs	r2, r3
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	061b      	lsls	r3, r3, #24
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	071b      	lsls	r3, r3, #28
 80033fa:	4926      	ldr	r1, [pc, #152]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d011      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	019a      	lsls	r2, r3, #6
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	491a      	ldr	r1, [pc, #104]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a17      	ldr	r2, [pc, #92]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003438:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800343e:	f7fd fd19 	bl	8000e74 <HAL_GetTick>
 8003442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003446:	f7fd fd15 	bl	8000e74 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b64      	cmp	r3, #100	; 0x64
 8003452:	d901      	bls.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0d8      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003458:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	f040 80ce 	bne.w	8003608 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a08      	ldr	r2, [pc, #32]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003472:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003476:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003478:	f7fd fcfc 	bl	8000e74 <HAL_GetTick>
 800347c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800347e:	e00b      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003480:	f7fd fcf8 	bl	8000e74 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b64      	cmp	r3, #100	; 0x64
 800348c:	d904      	bls.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0bb      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003492:	bf00      	nop
 8003494:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003498:	4b5e      	ldr	r3, [pc, #376]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a4:	d0ec      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d02e      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d12a      	bne.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034ce:	4b51      	ldr	r3, [pc, #324]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034dc:	4b4d      	ldr	r3, [pc, #308]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	0f1b      	lsrs	r3, r3, #28
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	019a      	lsls	r2, r3, #6
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	041b      	lsls	r3, r3, #16
 80034f4:	431a      	orrs	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	061b      	lsls	r3, r3, #24
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	071b      	lsls	r3, r3, #28
 8003502:	4944      	ldr	r1, [pc, #272]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800350a:	4b42      	ldr	r3, [pc, #264]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800350c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003510:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	493d      	ldr	r1, [pc, #244]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d022      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003538:	d11d      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800353a:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800353c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003540:	0e1b      	lsrs	r3, r3, #24
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003548:	4b32      	ldr	r3, [pc, #200]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800354e:	0f1b      	lsrs	r3, r3, #28
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	019a      	lsls	r2, r3, #6
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	041b      	lsls	r3, r3, #16
 8003562:	431a      	orrs	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	061b      	lsls	r3, r3, #24
 8003568:	431a      	orrs	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	071b      	lsls	r3, r3, #28
 800356e:	4929      	ldr	r1, [pc, #164]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003590:	4b20      	ldr	r3, [pc, #128]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	f003 0303 	and.w	r3, r3, #3
 800359c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	019a      	lsls	r2, r3, #6
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	041b      	lsls	r3, r3, #16
 80035a8:	431a      	orrs	r2, r3
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	061b      	lsls	r3, r3, #24
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	4917      	ldr	r1, [pc, #92]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035be:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	4911      	ldr	r1, [pc, #68]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fd fc48 	bl	8000e74 <HAL_GetTick>
 80035e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035e6:	e008      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035e8:	f7fd fc44 	bl	8000e74 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b64      	cmp	r3, #100	; 0x64
 80035f4:	d901      	bls.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e007      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035fa:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003602:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003606:	d1ef      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3720      	adds	r7, #32
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e040      	b.n	80036ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fd fb16 	bl	8000c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 f82c 	bl	80036b4 <UART_SetConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b01      	cmp	r3, #1
 8003660:	d101      	bne.n	8003666 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e022      	b.n	80036ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fa82 	bl	8003b78 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0201 	orr.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 fb09 	bl	8003cbc <UART_CheckIdleState>
 80036aa:	4603      	mov	r3, r0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036bc:	2300      	movs	r3, #0
 80036be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	69db      	ldr	r3, [r3, #28]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4ba7      	ldr	r3, [pc, #668]	; (800397c <UART_SetConfig+0x2c8>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	6979      	ldr	r1, [r7, #20]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a95      	ldr	r2, [pc, #596]	; (8003980 <UART_SetConfig+0x2cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d120      	bne.n	8003772 <UART_SetConfig+0xbe>
 8003730:	4b94      	ldr	r3, [pc, #592]	; (8003984 <UART_SetConfig+0x2d0>)
 8003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003736:	f003 0303 	and.w	r3, r3, #3
 800373a:	2b03      	cmp	r3, #3
 800373c:	d816      	bhi.n	800376c <UART_SetConfig+0xb8>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x90>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003755 	.word	0x08003755
 8003748:	08003761 	.word	0x08003761
 800374c:	0800375b 	.word	0x0800375b
 8003750:	08003767 	.word	0x08003767
 8003754:	2301      	movs	r3, #1
 8003756:	77fb      	strb	r3, [r7, #31]
 8003758:	e14f      	b.n	80039fa <UART_SetConfig+0x346>
 800375a:	2302      	movs	r3, #2
 800375c:	77fb      	strb	r3, [r7, #31]
 800375e:	e14c      	b.n	80039fa <UART_SetConfig+0x346>
 8003760:	2304      	movs	r3, #4
 8003762:	77fb      	strb	r3, [r7, #31]
 8003764:	e149      	b.n	80039fa <UART_SetConfig+0x346>
 8003766:	2308      	movs	r3, #8
 8003768:	77fb      	strb	r3, [r7, #31]
 800376a:	e146      	b.n	80039fa <UART_SetConfig+0x346>
 800376c:	2310      	movs	r3, #16
 800376e:	77fb      	strb	r3, [r7, #31]
 8003770:	e143      	b.n	80039fa <UART_SetConfig+0x346>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a84      	ldr	r2, [pc, #528]	; (8003988 <UART_SetConfig+0x2d4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d132      	bne.n	80037e2 <UART_SetConfig+0x12e>
 800377c:	4b81      	ldr	r3, [pc, #516]	; (8003984 <UART_SetConfig+0x2d0>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 030c 	and.w	r3, r3, #12
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d828      	bhi.n	80037dc <UART_SetConfig+0x128>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <UART_SetConfig+0xdc>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037c5 	.word	0x080037c5
 8003794:	080037dd 	.word	0x080037dd
 8003798:	080037dd 	.word	0x080037dd
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037d1 	.word	0x080037d1
 80037a4:	080037dd 	.word	0x080037dd
 80037a8:	080037dd 	.word	0x080037dd
 80037ac:	080037dd 	.word	0x080037dd
 80037b0:	080037cb 	.word	0x080037cb
 80037b4:	080037dd 	.word	0x080037dd
 80037b8:	080037dd 	.word	0x080037dd
 80037bc:	080037dd 	.word	0x080037dd
 80037c0:	080037d7 	.word	0x080037d7
 80037c4:	2300      	movs	r3, #0
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e117      	b.n	80039fa <UART_SetConfig+0x346>
 80037ca:	2302      	movs	r3, #2
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e114      	b.n	80039fa <UART_SetConfig+0x346>
 80037d0:	2304      	movs	r3, #4
 80037d2:	77fb      	strb	r3, [r7, #31]
 80037d4:	e111      	b.n	80039fa <UART_SetConfig+0x346>
 80037d6:	2308      	movs	r3, #8
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e10e      	b.n	80039fa <UART_SetConfig+0x346>
 80037dc:	2310      	movs	r3, #16
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e10b      	b.n	80039fa <UART_SetConfig+0x346>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a69      	ldr	r2, [pc, #420]	; (800398c <UART_SetConfig+0x2d8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d120      	bne.n	800382e <UART_SetConfig+0x17a>
 80037ec:	4b65      	ldr	r3, [pc, #404]	; (8003984 <UART_SetConfig+0x2d0>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80037f6:	2b30      	cmp	r3, #48	; 0x30
 80037f8:	d013      	beq.n	8003822 <UART_SetConfig+0x16e>
 80037fa:	2b30      	cmp	r3, #48	; 0x30
 80037fc:	d814      	bhi.n	8003828 <UART_SetConfig+0x174>
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d009      	beq.n	8003816 <UART_SetConfig+0x162>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d810      	bhi.n	8003828 <UART_SetConfig+0x174>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <UART_SetConfig+0x15c>
 800380a:	2b10      	cmp	r3, #16
 800380c:	d006      	beq.n	800381c <UART_SetConfig+0x168>
 800380e:	e00b      	b.n	8003828 <UART_SetConfig+0x174>
 8003810:	2300      	movs	r3, #0
 8003812:	77fb      	strb	r3, [r7, #31]
 8003814:	e0f1      	b.n	80039fa <UART_SetConfig+0x346>
 8003816:	2302      	movs	r3, #2
 8003818:	77fb      	strb	r3, [r7, #31]
 800381a:	e0ee      	b.n	80039fa <UART_SetConfig+0x346>
 800381c:	2304      	movs	r3, #4
 800381e:	77fb      	strb	r3, [r7, #31]
 8003820:	e0eb      	b.n	80039fa <UART_SetConfig+0x346>
 8003822:	2308      	movs	r3, #8
 8003824:	77fb      	strb	r3, [r7, #31]
 8003826:	e0e8      	b.n	80039fa <UART_SetConfig+0x346>
 8003828:	2310      	movs	r3, #16
 800382a:	77fb      	strb	r3, [r7, #31]
 800382c:	e0e5      	b.n	80039fa <UART_SetConfig+0x346>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a57      	ldr	r2, [pc, #348]	; (8003990 <UART_SetConfig+0x2dc>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d120      	bne.n	800387a <UART_SetConfig+0x1c6>
 8003838:	4b52      	ldr	r3, [pc, #328]	; (8003984 <UART_SetConfig+0x2d0>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003842:	2bc0      	cmp	r3, #192	; 0xc0
 8003844:	d013      	beq.n	800386e <UART_SetConfig+0x1ba>
 8003846:	2bc0      	cmp	r3, #192	; 0xc0
 8003848:	d814      	bhi.n	8003874 <UART_SetConfig+0x1c0>
 800384a:	2b80      	cmp	r3, #128	; 0x80
 800384c:	d009      	beq.n	8003862 <UART_SetConfig+0x1ae>
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d810      	bhi.n	8003874 <UART_SetConfig+0x1c0>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <UART_SetConfig+0x1a8>
 8003856:	2b40      	cmp	r3, #64	; 0x40
 8003858:	d006      	beq.n	8003868 <UART_SetConfig+0x1b4>
 800385a:	e00b      	b.n	8003874 <UART_SetConfig+0x1c0>
 800385c:	2300      	movs	r3, #0
 800385e:	77fb      	strb	r3, [r7, #31]
 8003860:	e0cb      	b.n	80039fa <UART_SetConfig+0x346>
 8003862:	2302      	movs	r3, #2
 8003864:	77fb      	strb	r3, [r7, #31]
 8003866:	e0c8      	b.n	80039fa <UART_SetConfig+0x346>
 8003868:	2304      	movs	r3, #4
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e0c5      	b.n	80039fa <UART_SetConfig+0x346>
 800386e:	2308      	movs	r3, #8
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e0c2      	b.n	80039fa <UART_SetConfig+0x346>
 8003874:	2310      	movs	r3, #16
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e0bf      	b.n	80039fa <UART_SetConfig+0x346>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a45      	ldr	r2, [pc, #276]	; (8003994 <UART_SetConfig+0x2e0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d125      	bne.n	80038d0 <UART_SetConfig+0x21c>
 8003884:	4b3f      	ldr	r3, [pc, #252]	; (8003984 <UART_SetConfig+0x2d0>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003892:	d017      	beq.n	80038c4 <UART_SetConfig+0x210>
 8003894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003898:	d817      	bhi.n	80038ca <UART_SetConfig+0x216>
 800389a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389e:	d00b      	beq.n	80038b8 <UART_SetConfig+0x204>
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a4:	d811      	bhi.n	80038ca <UART_SetConfig+0x216>
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <UART_SetConfig+0x1fe>
 80038aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ae:	d006      	beq.n	80038be <UART_SetConfig+0x20a>
 80038b0:	e00b      	b.n	80038ca <UART_SetConfig+0x216>
 80038b2:	2300      	movs	r3, #0
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e0a0      	b.n	80039fa <UART_SetConfig+0x346>
 80038b8:	2302      	movs	r3, #2
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e09d      	b.n	80039fa <UART_SetConfig+0x346>
 80038be:	2304      	movs	r3, #4
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e09a      	b.n	80039fa <UART_SetConfig+0x346>
 80038c4:	2308      	movs	r3, #8
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e097      	b.n	80039fa <UART_SetConfig+0x346>
 80038ca:	2310      	movs	r3, #16
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e094      	b.n	80039fa <UART_SetConfig+0x346>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a30      	ldr	r2, [pc, #192]	; (8003998 <UART_SetConfig+0x2e4>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d125      	bne.n	8003926 <UART_SetConfig+0x272>
 80038da:	4b2a      	ldr	r3, [pc, #168]	; (8003984 <UART_SetConfig+0x2d0>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80038e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038e8:	d017      	beq.n	800391a <UART_SetConfig+0x266>
 80038ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80038ee:	d817      	bhi.n	8003920 <UART_SetConfig+0x26c>
 80038f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038f4:	d00b      	beq.n	800390e <UART_SetConfig+0x25a>
 80038f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038fa:	d811      	bhi.n	8003920 <UART_SetConfig+0x26c>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <UART_SetConfig+0x254>
 8003900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003904:	d006      	beq.n	8003914 <UART_SetConfig+0x260>
 8003906:	e00b      	b.n	8003920 <UART_SetConfig+0x26c>
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e075      	b.n	80039fa <UART_SetConfig+0x346>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e072      	b.n	80039fa <UART_SetConfig+0x346>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e06f      	b.n	80039fa <UART_SetConfig+0x346>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e06c      	b.n	80039fa <UART_SetConfig+0x346>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e069      	b.n	80039fa <UART_SetConfig+0x346>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a1c      	ldr	r2, [pc, #112]	; (800399c <UART_SetConfig+0x2e8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d137      	bne.n	80039a0 <UART_SetConfig+0x2ec>
 8003930:	4b14      	ldr	r3, [pc, #80]	; (8003984 <UART_SetConfig+0x2d0>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800393a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800393e:	d017      	beq.n	8003970 <UART_SetConfig+0x2bc>
 8003940:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003944:	d817      	bhi.n	8003976 <UART_SetConfig+0x2c2>
 8003946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800394a:	d00b      	beq.n	8003964 <UART_SetConfig+0x2b0>
 800394c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003950:	d811      	bhi.n	8003976 <UART_SetConfig+0x2c2>
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <UART_SetConfig+0x2aa>
 8003956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800395a:	d006      	beq.n	800396a <UART_SetConfig+0x2b6>
 800395c:	e00b      	b.n	8003976 <UART_SetConfig+0x2c2>
 800395e:	2300      	movs	r3, #0
 8003960:	77fb      	strb	r3, [r7, #31]
 8003962:	e04a      	b.n	80039fa <UART_SetConfig+0x346>
 8003964:	2302      	movs	r3, #2
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e047      	b.n	80039fa <UART_SetConfig+0x346>
 800396a:	2304      	movs	r3, #4
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e044      	b.n	80039fa <UART_SetConfig+0x346>
 8003970:	2308      	movs	r3, #8
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e041      	b.n	80039fa <UART_SetConfig+0x346>
 8003976:	2310      	movs	r3, #16
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e03e      	b.n	80039fa <UART_SetConfig+0x346>
 800397c:	efff69f3 	.word	0xefff69f3
 8003980:	40011000 	.word	0x40011000
 8003984:	40023800 	.word	0x40023800
 8003988:	40004400 	.word	0x40004400
 800398c:	40004800 	.word	0x40004800
 8003990:	40004c00 	.word	0x40004c00
 8003994:	40005000 	.word	0x40005000
 8003998:	40011400 	.word	0x40011400
 800399c:	40007800 	.word	0x40007800
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a71      	ldr	r2, [pc, #452]	; (8003b6c <UART_SetConfig+0x4b8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d125      	bne.n	80039f6 <UART_SetConfig+0x342>
 80039aa:	4b71      	ldr	r3, [pc, #452]	; (8003b70 <UART_SetConfig+0x4bc>)
 80039ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80039b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039b8:	d017      	beq.n	80039ea <UART_SetConfig+0x336>
 80039ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80039be:	d817      	bhi.n	80039f0 <UART_SetConfig+0x33c>
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c4:	d00b      	beq.n	80039de <UART_SetConfig+0x32a>
 80039c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ca:	d811      	bhi.n	80039f0 <UART_SetConfig+0x33c>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <UART_SetConfig+0x324>
 80039d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d4:	d006      	beq.n	80039e4 <UART_SetConfig+0x330>
 80039d6:	e00b      	b.n	80039f0 <UART_SetConfig+0x33c>
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e00d      	b.n	80039fa <UART_SetConfig+0x346>
 80039de:	2302      	movs	r3, #2
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e00a      	b.n	80039fa <UART_SetConfig+0x346>
 80039e4:	2304      	movs	r3, #4
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e007      	b.n	80039fa <UART_SetConfig+0x346>
 80039ea:	2308      	movs	r3, #8
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e004      	b.n	80039fa <UART_SetConfig+0x346>
 80039f0:	2310      	movs	r3, #16
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e001      	b.n	80039fa <UART_SetConfig+0x346>
 80039f6:	2310      	movs	r3, #16
 80039f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a02:	d15b      	bne.n	8003abc <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003a04:	7ffb      	ldrb	r3, [r7, #31]
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d827      	bhi.n	8003a5a <UART_SetConfig+0x3a6>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x35c>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7ff f9a0 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61b8      	str	r0, [r7, #24]
        break;
 8003a3a:	e013      	b.n	8003a64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7ff f9b0 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8003a40:	61b8      	str	r0, [r7, #24]
        break;
 8003a42:	e00f      	b.n	8003a64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b4b      	ldr	r3, [pc, #300]	; (8003b74 <UART_SetConfig+0x4c0>)
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e00c      	b.n	8003a64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7ff f8a7 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003a4e:	61b8      	str	r0, [r7, #24]
        break;
 8003a50:	e008      	b.n	8003a64 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61bb      	str	r3, [r7, #24]
        break;
 8003a58:	e004      	b.n	8003a64 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	77bb      	strb	r3, [r7, #30]
        break;
 8003a62:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d074      	beq.n	8003b54 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	005a      	lsls	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	441a      	add	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	2b0f      	cmp	r3, #15
 8003a86:	d916      	bls.n	8003ab6 <UART_SetConfig+0x402>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d212      	bcs.n	8003ab6 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	f023 030f 	bic.w	r3, r3, #15
 8003a98:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	085b      	lsrs	r3, r3, #1
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	89fb      	ldrh	r3, [r7, #14]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	89fa      	ldrh	r2, [r7, #14]
 8003ab2:	60da      	str	r2, [r3, #12]
 8003ab4:	e04e      	b.n	8003b54 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	77bb      	strb	r3, [r7, #30]
 8003aba:	e04b      	b.n	8003b54 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003abc:	7ffb      	ldrb	r3, [r7, #31]
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d827      	bhi.n	8003b12 <UART_SetConfig+0x45e>
 8003ac2:	a201      	add	r2, pc, #4	; (adr r2, 8003ac8 <UART_SetConfig+0x414>)
 8003ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac8:	08003aed 	.word	0x08003aed
 8003acc:	08003af5 	.word	0x08003af5
 8003ad0:	08003afd 	.word	0x08003afd
 8003ad4:	08003b13 	.word	0x08003b13
 8003ad8:	08003b03 	.word	0x08003b03
 8003adc:	08003b13 	.word	0x08003b13
 8003ae0:	08003b13 	.word	0x08003b13
 8003ae4:	08003b13 	.word	0x08003b13
 8003ae8:	08003b0b 	.word	0x08003b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7ff f944 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8003af0:	61b8      	str	r0, [r7, #24]
        break;
 8003af2:	e013      	b.n	8003b1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7ff f954 	bl	8002da0 <HAL_RCC_GetPCLK2Freq>
 8003af8:	61b8      	str	r0, [r7, #24]
        break;
 8003afa:	e00f      	b.n	8003b1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003afc:	4b1d      	ldr	r3, [pc, #116]	; (8003b74 <UART_SetConfig+0x4c0>)
 8003afe:	61bb      	str	r3, [r7, #24]
        break;
 8003b00:	e00c      	b.n	8003b1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b02:	f7ff f84b 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8003b06:	61b8      	str	r0, [r7, #24]
        break;
 8003b08:	e008      	b.n	8003b1c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b0e:	61bb      	str	r3, [r7, #24]
        break;
 8003b10:	e004      	b.n	8003b1c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	77bb      	strb	r3, [r7, #30]
        break;
 8003b1a:	bf00      	nop
    }

    if (pclk != 0U)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	085a      	lsrs	r2, r3, #1
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b0f      	cmp	r3, #15
 8003b3c:	d908      	bls.n	8003b50 <UART_SetConfig+0x49c>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b44:	d204      	bcs.n	8003b50 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	e001      	b.n	8003b54 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b60:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3720      	adds	r7, #32
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	40007c00 	.word	0x40007c00
 8003b70:	40023800 	.word	0x40023800
 8003b74:	00f42400 	.word	0x00f42400

08003b78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00a      	beq.n	8003ba2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d00a      	beq.n	8003bc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	f003 0304 	and.w	r3, r3, #4
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00a      	beq.n	8003be6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00a      	beq.n	8003c08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	f003 0310 	and.w	r3, r3, #16
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00a      	beq.n	8003c2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01a      	beq.n	8003c8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c76:	d10a      	bne.n	8003c8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00a      	beq.n	8003cb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	430a      	orrs	r2, r1
 8003cae:	605a      	str	r2, [r3, #4]
  }
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ccc:	f7fd f8d2 	bl	8000e74 <HAL_GetTick>
 8003cd0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d10e      	bne.n	8003cfe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f82d 	bl	8003d4e <UART_WaitOnFlagUntilTimeout>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e023      	b.n	8003d46 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d10e      	bne.n	8003d2a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f817 	bl	8003d4e <UART_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e00d      	b.n	8003d46 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	603b      	str	r3, [r7, #0]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d5e:	e05e      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d05a      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d68:	f7fd f884 	bl	8000e74 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	69ba      	ldr	r2, [r7, #24]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <UART_WaitOnFlagUntilTimeout+0x30>
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11b      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d8c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0201 	bic.w	r2, r2, #1
 8003d9c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2220      	movs	r2, #32
 8003da2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2220      	movs	r2, #32
 8003da8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e043      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d02c      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd2:	d124      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ddc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003dec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0201 	bic.w	r2, r2, #1
 8003dfc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e00f      	b.n	8003e3e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	bf0c      	ite	eq
 8003e2e:	2301      	moveq	r3, #1
 8003e30:	2300      	movne	r3, #0
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	461a      	mov	r2, r3
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d091      	beq.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <__libc_init_array>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4d0d      	ldr	r5, [pc, #52]	; (8003e80 <__libc_init_array+0x38>)
 8003e4c:	4c0d      	ldr	r4, [pc, #52]	; (8003e84 <__libc_init_array+0x3c>)
 8003e4e:	1b64      	subs	r4, r4, r5
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	2600      	movs	r6, #0
 8003e54:	42a6      	cmp	r6, r4
 8003e56:	d109      	bne.n	8003e6c <__libc_init_array+0x24>
 8003e58:	4d0b      	ldr	r5, [pc, #44]	; (8003e88 <__libc_init_array+0x40>)
 8003e5a:	4c0c      	ldr	r4, [pc, #48]	; (8003e8c <__libc_init_array+0x44>)
 8003e5c:	f000 f820 	bl	8003ea0 <_init>
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	2600      	movs	r6, #0
 8003e66:	42a6      	cmp	r6, r4
 8003e68:	d105      	bne.n	8003e76 <__libc_init_array+0x2e>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e70:	4798      	blx	r3
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7ee      	b.n	8003e54 <__libc_init_array+0xc>
 8003e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7a:	4798      	blx	r3
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	e7f2      	b.n	8003e66 <__libc_init_array+0x1e>
 8003e80:	08003ee0 	.word	0x08003ee0
 8003e84:	08003ee0 	.word	0x08003ee0
 8003e88:	08003ee0 	.word	0x08003ee0
 8003e8c:	08003ee4 	.word	0x08003ee4

08003e90 <memset>:
 8003e90:	4402      	add	r2, r0
 8003e92:	4603      	mov	r3, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <_init>:
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	bf00      	nop
 8003ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ea6:	bc08      	pop	{r3}
 8003ea8:	469e      	mov	lr, r3
 8003eaa:	4770      	bx	lr

08003eac <_fini>:
 8003eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eae:	bf00      	nop
 8003eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eb2:	bc08      	pop	{r3}
 8003eb4:	469e      	mov	lr, r3
 8003eb6:	4770      	bx	lr
